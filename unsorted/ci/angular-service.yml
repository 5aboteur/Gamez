include:
  - project: devops/gitlab-ci-base
    file: /services-docker.yml
  - project: devops/gitlab-ci-base
    file: /publish-docker.yml
  - project: devops/gitlab-ci-base
    file: /push-helm-charts.yml
  - project: devops/gitlab-ci-base
    file: /shared-helmfile.yml
  - project: devops/gitlab-ci-base
    file: /deploy-helmfile.yml
  - project: devops/gitlab-ci-base
    file: /sign-image.yml
  - build-docker.yml

stages:
  - prepare
  - build
  - publish
  - deploy

# Сборка артефакта по ветке (допустимые названия веток: bugfix, hotfix, feature + № issue)
build_branches:
  extends: .build_docker_image_angular
  stage: build
  tags:
   - project-front
  variables:
    KANIKO_DESTINATION: >
      $CI_REGISTRY/$CI_PROJECT_PATH:${CI_COMMIT_REF_SLUG}
    KANIKO_EXTRA: --no-push
    ARTIFACT_VERSION: ${CI_COMMIT_REF_SLUG}-SNAPSHOT
  only:
    refs:
      - /^bugfix\/.+$/
      - /^hotfix\/.+$/
      - /^feature\/.+$/
    changes:
      - src/**/*
      - Dockerfile
      - "*.js"
      - "*.json"
  except:
    - tags
    - master
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

# Сборка артефакта для стенда разработки (DEV) с master ветки
build_dev:
  extends: .build_docker_image_angular
  stage: build
  tags:
   - project-front
  variables:
    KANIKO_DESTINATION: >
      $CI_REGISTRY/$CI_PROJECT_PATH:${CI_COMMIT_REF_SLUG}
      $CI_REGISTRY/$CI_PROJECT_PATH:latest
      $CI_REGISTRY/$CI_PROJECT_PATH:dev
  only:
    refs:
      - master
    changes:
      - src/**/*
      - Dockerfile
      - "*.js"
      - "*.json"
  except:
    - tags
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

# Сборка артефакта для стенда пре-продакшн (RC) с pre-production ветки
build_rc:
  extends: .build_docker_image_angular
  stage: build
  tags:
   - project-front
  variables:
    KANIKO_DESTINATION: >
      $CI_REGISTRY/$CI_PROJECT_PATH:${CI_COMMIT_TAG}
      $CI_REGISTRY/$CI_PROJECT_PATH:latest
      $CI_REGISTRY/$CI_PROJECT_PATH:rc
  only:
    refs:
      - /^\d+\.\d+\.\d+-RC\d+$/
  except:
    - branches
    - master
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

# Сборка release артефакта, разворачивается на продакшн стенде (PROD) с production ветки
build_release:
  extends: .build_docker_image_angular
  stage: build
  tags:
   - project-front
  variables:
    KANIKO_AUTHS: >
      /$CI_REGISTRY/$REGISTRY_PUSHER_LOGIN/$REGISTRY_PUSHER_PASSWORD/
      /$CI_REGISTRY_EXT/$REGISTRY_PUSHER_LOGIN/$REGISTRY_PUSHER_PASSWORD/
      /$CI_CACHE_REGISTRY/$REGISTRY_PUSHER_LOGIN/$REGISTRY_PUSHER_PASSWORD/
    KANIKO_DESTINATION: >
      $CI_REGISTRY/$CI_PROJECT_PATH:${CI_COMMIT_TAG}
      $CI_REGISTRY/$CI_PROJECT_PATH:latest
      $CI_REGISTRY/$CI_PROJECT_PATH:stable
      $CI_REGISTRY_EXT/$CI_PROJECT_PATH:latest
      $CI_REGISTRY_EXT/$CI_PROJECT_PATH:${CI_COMMIT_TAG}
  only:
    refs:
      - /^\d+\.\d+\.\d+$/
  except:
    - branches
    - master
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

# Сборка артефакта при слиянии (merge-request)
build_mr:
  extends: .build_docker_image_angular
  stage: build
  tags:
   - project-front
  variables:
    KANIKO_DESTINATION: >
      $CI_REGISTRY/$CI_PROJECT_PATH:${CI_COMMIT_REF_SLUG}
    KANIKO_EXTRA: --no-push
  only:
    refs:
      - merge_requests
  except:
    - tags
    - master
    - branches
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/

# Публикация образа (релиз-кандидатов)
publish_image:
  extends: .publish-docker
  stage: publish
  only:
    refs:
      - /^\d+\.\d+\.\d+-RC\d+$/
  except:
    - branches
    - master
  when: manual

# Генерация helm-file (только при изменении содержимого helm)
deploy_prepare:
  stage: prepare
  variables:
    CHART_LOCATION: .
    IS_LOCAL_CHART: 'true'
  extends: .shared_helmfile
  only:
    refs:
      - tags
      - master

# Публикация helm-chart
publish_helm:
  extends: .publish_helm
  stage: publish
  only:
    changes:
      - helm/**/*
    refs:
      - /^\d+\.\d+\.\d+$/

# Публикация helm-chart (в ручном режиме для релиз-кандидатов)
publish_helm_manual:
  extends: .publish_helm
  stage: publish
  only:
    refs:
      - /^\d+\.\d+\.\d+-RC\d+$/
  when: manual
  
# Разворачивание на стенд разработки
deploy_dev:
  extends: .deploy_helmfile
  variables:
    K8S_CONFIG: $KUBE_CONFIG_AML_DEV
    HELMFILE_NAMESPACE: project-dev
    HELMFILE_YAML: helm/helmfile.yaml
  environment:
    name: dev
  dependencies:
    - deploy_prepare
  only:
    refs:
      - master

# Разворачивание на пре-продакшн стенд
deploy_rc:
  extends: .deploy_helmfile
  variables:
    K8S_CONFIG: $KUBE_CONFIG_AML_RC
    HELMFILE_NAMESPACE: project-rc
    HELMFILE_YAML: helm/helmfile.yaml
  environment:
    name: rc
    url: https://front.project-rc.cloud.ftc.ru/
  dependencies:
    - deploy_prepare
  only:
    refs:
      - /^\d+\.\d+\.\d+-RC\d+$/

# Разворачивание на stable-стенд
deploy_stable:
  extends: .deploy_helmfile
  variables:
    K8S_CONFIG: $KUBE_CONFIG_AML_STABLE
    HELMFILE_NAMESPACE: project-stable
    HELMFILE_YAML: helm/helmfile.yaml
  environment:
    name: stable
    url: https://front.project-stable.cloud.ftc.ru/
  dependencies:
    - deploy_prepare
  tags:
    - prod-runner
  when: manual
  only:
    refs:
      - tags
      - master
  #      - /^\d+\.\d+\.\d+-STABLE\d+$/
  retry: 2
  
# Разворачивание на продакшн стенд
deploy_prod:
  extends: .deploy_helmfile
  variables:
    K8S_CONFIG: $KUBE_CONFIG_AML_PROD
    HELMFILE_NAMESPACE: project-prod
    HELMFILE_YAML: helm/helmfile.yaml
  environment:
    name: prod
  dependencies:
    - deploy_prepare
  only:
    refs:
      - /^\d+\.\d+\.\d+$/
  when: manual
